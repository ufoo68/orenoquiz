// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model QuizMaster {
    id        String   @id @default(uuid())
    userId    String   @default("guest")
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model QuizQuestion {
    id        String   @id @default(uuid())
    masterId  String
    title     String
    contents  Json
    order     Int      @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model QuizSession {
    id        String   @id @default(uuid())
    masterId  String
    state     Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Participant {
    id        String   @id @default(uuid())
    sessionId String
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ParticipantSubimit {
    id            String   @id @default(uuid())
    sessionId     String
    participantId String
    questionId    String
    value         Json
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

enum ScoreResult {
    WIN
    LOSE
}

model ParticipantScore {
    id         String      @id @default(uuid())
    questionId String
    sessionId  String
    participantId String
    result     ScoreResult
    duration    Int
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
}

// 以心伝心ゲーム用

enum IshinDenshinSessionState {
    WAIT
    SHOW
}

enum IshinDenshinSessionResult {
    NONE
    MATCH
    NOT_MATCH
}

model IshinDenshinSession {
    id        String                    @id @default(uuid())
    userId    String                    @default("guest")
    state     IshinDenshinSessionState
    version   Int
    result    IshinDenshinSessionResult @default(NONE)
    createdAt DateTime                  @default(now())
    updatedAt DateTime                  @updatedAt
}

model IshinDenshinSubmit {
    id               String   @id @default(uuid())
    answereName      String
    boardImageBuffer Bytes
    sessionId        String
    version          Int
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}

// AuthNext.js

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}