// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model QuizMaster {
    id        String         @id @default(uuid())
    title     String
    questions QuizQuestion[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
}

enum QuestionType {
    SELECT
    SORT
    INPUT
}

model QuizQuestion {
    id          String                @id @default(uuid())
    masterId    String
    type        QuestionType
    description String
    master      QuizMaster            @relation(fields: [masterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    candidates  QuizAnswerCandidate[]
    createdAt   DateTime              @default(now())
    updatedAt   DateTime              @updatedAt

    @@index([masterId])
}

model QuizAnswer {
    id          String      @id @default(uuid())
    questionId  String
    description String
    value       Json
    question    QuizSession @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index([questionId])
}

model QuizAnswerCandidate {
    id             String        @id @default(uuid())
    questionId     String
    description    String
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    QuizQuestion   QuizQuestion? @relation(fields: [quizQuestionId], references: [id])
    quizQuestionId String?

    @@index([quizQuestionId])
}

model QuizSession {
    id           String        @id @default(uuid())
    masterId     String
    state        Json
    Participants Participant[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    QuizAnswer   QuizAnswer[]
}

model Participant {
    id        String      @id @default(uuid())
    session   QuizSession @relation(fields: [sessionId], references: [id])
    sessionId String
    name      String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    @@index([sessionId])
}

model ParticipantSubimit {
    id            String   @id @default(uuid())
    sessionId     String
    participantId String
    questionId    String
    value         Json
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

enum ScoreResult {
    WIN
    LOSE
}

model ParticipantScore {
    id         String      @id @default(uuid())
    questionId String
    sessionId  String
    result     ScoreResult
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
}

// 以心伝心ゲーム用

enum IshinDenshinSessionState {
    READY
    WAIT
    END
}

model IshinDenshinSession {
    id           String                   @id @default(uuid())
    answereCount Int
    state        IshinDenshinSessionState @default(WAIT)
    version      Int                      @default(0)
    createdAt    DateTime                 @default(now())
    updatedAt    DateTime                 @updatedAt
}

model IshinDenshinSubmit {
    id               String   @id @default(uuid())
    answereName      String
    boardImageBuffer Bytes
    sessionId        String
    version          Int
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}
